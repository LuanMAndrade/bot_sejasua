from typing import Annotated, TypedDict, Sequence
from langgraph.graph import StateGraph, END, START, add_messages
from langgraph.prebuilt import ToolNode
from langchain_core.messages import AnyMessage
from filtro import filtro
from pagamento import pagamento
from nao_entendi import nao_entendi
from self_querying import rag
from informacoes import informacoes
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableConfig
from dotenv import load_dotenv

from langgraph.checkpoint.memory import InMemorySaver
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

from pydantic import BaseModel, Field
from langchain_core.output_parsers import PydanticOutputParser


tools = [rag, pagamento, filtro, informacoes, nao_entendi]




load_dotenv()

model = ChatGoogleGenerativeAI(model='gemini-2.5-flash')
model = ChatOpenAI(model="gpt-4o")
model_bind_tool = model.bind_tools(tools)


#_____________________________________________________________________________________________________
class ClassificaEntrada(BaseModel):
    resposta: list = Field(description="" \
    "Se for necess√°rio usar uma ferramenta, a resposta deve ser string normal. " \
    "Caso contr√°rio, Defina uma lista python onde cada item desta lista ser√° uma string contendo parte da resposta." \
    "A resposta final deve seguir exatamente o formato abaixo, onde cada item da lista representa uma parte da resposta a ser enviada separadamente no WhatsApp:" \
    "Sempre que tiver algum link na resposta, ele dever√° estar isolado em um √∫nico item")

parser_classifica = PydanticOutputParser(pydantic_object=ClassificaEntrada)

#_____________________________________________________________________________________________________

class AgentState(TypedDict):
    messages: Annotated[Sequence[AnyMessage], add_messages]

def call_model(state: AgentState, config: RunnableConfig):
    
    sys_prompt = """Voc√™ √© uma atendente de loja de moda fitness feminina que atende suas clientes pelo Whatsapp. 
    
    # Ferramentas
    Voc√™ tem acesso a ferramentas que ser√£o explicadas abaixo. use elas sempre que poss√≠vel.
    <Ferramentas>
    1. **rag**: Esta ferramenta busca os produtos mais relevantes no estoque de acordo com o que o cliente quer".
    2. **pagamento**: Esta ferramenta deve ser utilizada quando voc√™ perceber que a cliente vai finalizar a compra. Ela vai gerar um link de pagamento para a cliente.
    3. **informacoes**: Esta ferramenta √© √∫til quando a cliente pede informa√ß√µes sobre a loja, como "Qual √© o hor√°rio de funcionamento?" ou "Voc√™s fazem entrega?". Ela vai buscar as informa√ß√µes necess√°rias para responder a cliente.
    4. **nao_entendi**: Esta ferramenta deve ser utilizada quando voc√™ n√£o entender a solicita√ß√£o da cliente. Ela vai gerar uma mensagem padr√£o de n√£o entendimento.
    </Ferramentas>

    # Regras
    1. Voc√™ deve ter uma conversa fluida, evitando textos muito longos. Se comunique de maneira objetiva, mas n√£o de forma curta demais ao ponto de ser mal educada. 
    2. Sempre induza a cliente a continuar o atendimento. N√£o use frases como "Se precisar de mais informa√ß√µes sobre algum modelo espec√≠fico, estou √† disposi√ß√£o!".
    3. Mantenha perguntas que direcionem a cliente para a compra, como por exemplo: 'Voc√™ veste quanto?', 'Tem prefer√™ncia de cor?', etc.
    4. Evite linguagem muito formal.
    5. Evite frases como "Posso te ajudar a encontrar o modelo perfeito!" ou "Posso te ajudar a encontrar o que mais combina com voc√™! üòä". haja de forma mais natural como se fosse uma amiga ajudando a escolher a roupa
    6. Se for escrever informa√ß√µes diferentes em uma mesma mensagem, evite colocar tudo na mesma linha, mas tamb√©m n√£o coloque cada frase em uma linha diferente, fa√ßa de forma equilibrada.
    7. Quando fizer uma pergunta, tente terminar a mensagem com essa pergunta, n√£o coloque texto depois
    8. Voc√™ estar√° conversando pelo Whatsapp e o Whatsapp entende o negrito desta forma: *negrito*. E n√£o desta forma: **negrito**. Lembre disso se for utilizar o negrito na conversa.
    9. Sempre que fizer sentido, envie o link da imagem do produto que a cliente demonstrou interesse.
    10. **NUNCA invente informa√ß√µes**.


    A seguir vou mostrar exemplos reais de conversas de uma excelente atendente da loja.

    ## Exemplos

    ==Este √© s√≥ um exemplo de como a conversa deve ser; n√£o √© para incluir este exemplo nas suas respostas.==

    <Exemplos de conversas reais>

    1. Cliente: Eu t√¥ procurando um modelo de top mais curtinho, pra usar com camisa.
    Atendente: Temos sim! O top faixa ele √© curto e b√°sico
    2. Cliente: preciso de 3 shorts iguais para uma corrida no domingo, pra mim e para duas amigas!
    Atendente: Claro!! Me diz o tamanho que voc√™s vestem que eu te digo o que temos aqui pra voc√™s.
    3. Cliente: tem blusa coladinho?
    Atendente: Temos sim! Temos algumas op√ß√µes de regatas que s√£o de poliamida e ficam bem coladinhas
    4. Cliente: O bolso √© grande o suficiente para dar um celular, chave e essas coisinhas?
    Atendente: Sim!! Cabe at√© uma garrafa de √°gua de 500ml

    </Exemplos de conversas reais>
    """
    
    prompt_template = ChatPromptTemplate.from_messages([('system', sys_prompt),
                                                    MessagesPlaceholder(variable_name='history'),
                                                    ('human', "{input}")
                                                    ])
    full_input = {
            "input": state["messages"][-1].content,
            "history": state["messages"]
        }

    # Aplica o prompt formatado
    prompt = prompt_template.invoke(full_input)

    # Chama o modelo
    response = model_bind_tool.invoke(prompt, config)

    retorno = {"messages": [response]}
    
    return retorno

def should_continue(state):
    messages = state["messages"]
    last_message = messages[-1]
    if not last_message.tool_calls:
        return "formatador"
    else:
        return "no_ferramenta"
    
def call_formatador(state: AgentState, config: RunnableConfig):
    sys_prompt = """Voc√™ √© especialista em formatar mensagens para Whatsapp. A sua fun√ß√£o √© retornar a mesma mensagem que recebeu, exatamente igual em conte√∫do, mas na formata√ß√£o informada. 
    Voc√™ deve seguir as regras abaixo: 
    
    # Formata√ß√£o
    
    {formatacao}

    1. Nunca inclua explica√ß√µes nem escreva fora do formato especificado. Apenas retorne a lista dentro da estrutura do campo `resposta`.
    2. A divis√£o da resposta deve ser feita para parecer uma conversa mais natural
    3. Sempre que tiver algum link na resposta, ele dever√° estar isolado em um √∫nico item

    # Exemplo de sa√≠da esperada

    Exemplo de sa√≠da esperada:

    "resposta": [
        "Oi!",
        "Temos sim, v√°rios modelos de top curtinho!",
        "Voc√™ quer usar com camisa, n√©? Prefere branco ou preto?"
    ]


    """
    
    full_input = {
            "input": state["messages"][-1].content,
            "formatacao": parser_classifica.get_format_instructions()
            }
    prompt_template = ChatPromptTemplate.from_messages([('system', sys_prompt),
                                                    ('human', "{input}")])
    prompt = prompt_template.invoke(full_input)
    
    resposta = model.invoke(prompt, config)
    structured = parser_classifica.invoke(resposta).resposta
    retorno = {
    "messages": [
        *state["messages"],  # hist√≥rico anterior
        *[{"role": "assistant", "content": structured}] 
    ]}

    return retorno


def build_chat_graph():
    memory = InMemorySaver()
    workflow = StateGraph(AgentState)
    workflow.add_node("agent", call_model)
    workflow.add_node("no_ferramenta", ToolNode(tools))
    workflow.add_node("formatador", call_formatador)

    ## Definindo nossa aresta condicional:
    workflow.add_edge(START, "agent")
    workflow.add_conditional_edges("agent", should_continue)
    workflow.add_edge("no_ferramenta", "agent")
    workflow.add_edge("formatador", END)
    return workflow.compile(checkpointer=memory)

chat_graph = build_chat_graph()



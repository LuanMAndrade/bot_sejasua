from typing import Annotated, TypedDict, Sequence
from langgraph.graph import StateGraph, END, START, add_messages
from langgraph.prebuilt import ToolNode
from langchain_core.messages import AnyMessage
from filtro import filtro
from pagamento import pagamento
from nao_entendi import nao_entendi
from self_querying import rag
from informacoes import informacoes
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableConfig
from dotenv import load_dotenv
from sqlite import save_message, get_history
from langchain_core.messages import HumanMessage, AIMessage, ToolMessage
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
import os
from langgraph.managed.is_last_step import RemainingSteps


tools = [rag, pagamento, informacoes, nao_entendi]

load_dotenv()

MODEL = os.getenv("MODEL")

model = ChatOpenAI(model=MODEL)
model_bind_tool = model.bind_tools(tools)



class AgentState(TypedDict):
    messages: Annotated[Sequence[AnyMessage], add_messages]
    remaining_steps: RemainingSteps

def call_model(state: AgentState, config: RunnableConfig):
    conversation_id = config.get("configurable", {}).get("conversation_id", "default") ##
    history = get_history(conversation_id) ##
    
    sys_prompt = """Voc√™ √© uma atendente de loja de moda fitness feminina que atende suas clientes pelo Whatsapp. 
    
    # Ferramentas
    Voc√™ tem acesso a ferramentas que ser√£o explicadas abaixo. use elas sempre que necess√°rio.
    <Ferramentas>
    1. **rag**: Esta ferramenta busca os produtos mais relevantes no estoque de acordo com o que o cliente quer.
    2. **pagamento**: Esta ferramenta deve ser utilizada quando voc√™ perceber que a cliente vai finalizar a compra. Ela vai gerar um link de pagamento para a cliente.
    3. **informacoes**: Esta ferramenta √© √∫til quando a cliente pede informa√ß√µes sobre a loja, como "Qual √© o hor√°rio de funcionamento?" ou "Voc√™s fazem entrega?". Ela vai buscar as informa√ß√µes necess√°rias para responder a cliente.
    4. **nao_entendi**: Esta ferramenta deve ser utilizada quando voc√™ n√£o entender a solicita√ß√£o da cliente. Ela vai gerar uma mensagem padr√£o de n√£o entendimento.
    </Ferramentas>

    # Regras
    1. Voc√™ deve ter uma conversa fluida, evitando textos muito longos. Se comunique de maneira objetiva, mas n√£o de forma curta demais ao ponto de ser mal educada. 
    2. Sempre induza a cliente a continuar o atendimento. N√£o use frases como "Se precisar de mais informa√ß√µes sobre algum modelo espec√≠fico, estou √† disposi√ß√£o!".
    3. Mantenha perguntas que direcionem a cliente para a compra, como por exemplo: 'Voc√™ veste quanto?', 'Tem prefer√™ncia de cor?', etc.
    4. Evite linguagem muito formal.
    5. Evite frases como "Posso te ajudar a encontrar o modelo perfeito!" ou "Posso te ajudar a encontrar o que mais combina com voc√™! üòä". haja de forma mais natural como se fosse uma amiga ajudando a escolher a roupa
    6. Se for escrever informa√ß√µes diferentes em uma mesma mensagem, evite colocar tudo na mesma linha, mas tamb√©m n√£o coloque cada frase em uma linha diferente, fa√ßa de forma equilibrada.
    7. Quando fizer uma pergunta, tente terminar a mensagem com essa pergunta, n√£o coloque texto depois
    8. Voc√™ estar√° conversando pelo Whatsapp e o Whatsapp entende o negrito desta forma: *negrito*. E n√£o desta forma: **negrito**. Lembre disso se for utilizar o negrito na conversa.
    9. Sempre que fizer sentido, envie o link da imagem do produto que a cliente demonstrou interesse.
    10. **NUNCA invente informa√ß√µes**.
    11. **NUNCA fale que vai fazer algo que voc√™ n√£o consegue, por exemplo, tirar uma foto**

    ## Exemplos

    A seguir vou mostrar exemplos reais de conversas de uma excelente atendente da loja.

    ==Este √© s√≥ um exemplo de como a conversa deve ser; n√£o √© para incluir este exemplo nas suas respostas.==

    <Exemplos de conversas reais>

    1. Cliente: Eu t√¥ procurando um modelo de top mais curtinho, pra usar com camisa.
    Atendente: Temos sim! O top faixa ele √© curto e b√°sico
    2. Cliente: preciso de 3 shorts iguais para uma corrida no domingo, pra mim e para duas amigas!
    Atendente: Claro!! Me diz o tamanho que voc√™s vestem que eu te digo o que temos aqui pra voc√™s.
    3. Cliente: tem blusa coladinho?
    Atendente: Temos sim! Temos algumas op√ß√µes de regatas que s√£o de poliamida e ficam bem coladinhas
    4. Cliente: O bolso √© grande o suficiente para dar um celular, chave e essas coisinhas?
    Atendente: Sim!! Cabe at√© uma garrafa de √°gua de 500ml

    </Exemplos de conversas reais>
    
    # Formata√ß√£o
    
    1. A resposta final deve vir separada em mensagens fracionadas, de forma a parecer ao m√°ximo uma conversa natural.
    2. O simbolo para demonstrar a separa√ß√£o dever√° ser o seguinte: '$%&$'
    3. Esse simbolo deve ser inserido ao final de cada fra√ß√£o de mensagem, demonstrando que ap√≥s ele ser√° iniciada uma nova fra√ß√£o de mensagem.
    4. Sempre que tiver algum link na resposta, ele dever√° estar isolado em uma √∫nica fra√ß√£o de mensagem

    # Exemplo de sa√≠da esperada

    Input:
    Oi!

    Exemplo de sa√≠da esperada:
    Oi!$%&$Tudo bem?$%&$Como posso te ajudar hoje?

    """
    
    prompt_template = ChatPromptTemplate.from_messages([
    ('system', sys_prompt),
    MessagesPlaceholder(variable_name='history'),
    MessagesPlaceholder(variable_name='current_messages'),
])


    full_input = {
    "history": history,  # mensagens antigas
    "current_messages": state["messages"]  # mensagens novas
}


    # Aplica o prompt formatado
    prompt = prompt_template.invoke(full_input)

    # Chama o modelo
    response = model_bind_tool.invoke(prompt, config)
    
    return {"messages": [response]}

def should_continue(state):
    messages = state["messages"]
    last_message = messages[-1]
    if not last_message.tool_calls or state["remaining_steps"] <=18:
        return "save"
    else:
        return "no_ferramenta"
    
def save(state, config):
    conversation_id = config.get("configurable", {}).get("conversation_id", "default")
    save_message(conversation_id, state["messages"])


def build_chat_graph():
    workflow = StateGraph(AgentState)

    workflow.add_node("agent", call_model)
    workflow.add_node("no_ferramenta", ToolNode(tools))
    workflow.add_node("save", save)

    # Fluxo de in√≠cio ‚Üí agent
    workflow.add_edge(START, "agent")

    # Se o agent n√£o chamar ferramenta, encerra; sen√£o, vai para no_ferramenta
    workflow.add_conditional_edges("agent", should_continue)

    # Depois da ferramenta, volta para agent
    workflow.add_edge("no_ferramenta", "agent")

    workflow.add_edge("save", END)

    # Compila sem checkpointer
    return workflow.compile()


chat_graph = build_chat_graph()


